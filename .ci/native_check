#!/bin/bash

# Set bash to exit immediately if any command fails and treat unset variables as an error
set -eu

# Include the common utility script
. "$(dirname "$0")"/common.sh

# Function to list changed Markdown files in a commit range
changed_files() {
    local commit_range="$1"
    # List only Markdown files that were Added (A), Copied (C), Modified (M), or Renamed (R)
    git diff --name-only --diff-filter=ACMR "$commit_range" -- '*.md'
}

# Determine the commit range for the current push
COMMIT_RANGE="${COMMIT_LIST:-$(git rev-parse HEAD~1)..HEAD}"

title "Verifying namespaces in changed Markdown files between $COMMIT_RANGE"

# Begin processing files
failed_files=''
successful_files=''

echo 'Affected Markdown files:'
changed_files "$COMMIT_RANGE" | while read file; do
    if [ -z "$file" ]; then continue; fi  # Skip if no file is found

    # Skip specific directories and the README.md file
    if [[ "$file" == .ci/* || "$file" == .github/* || "$file" == .git/* || "$file" == "README.md" ]]; then
        print -s0 -c3 "Skipping excluded file or directory: $file"
        continue
    fi

    fold_start "$file" "Verifying $file"

    # Attempt to extract the namespace from the file
    NS=$(sed -n '/^---$/,/^---$/{/^ns:/p;}' "$file" | sed 's/ns: //' | tr -d '[:space:]')
    if [ -z "$NS" ]; then
        print -s0 -c3 "No namespace found in $file. Skipping..."
        successful_files="$successful_files $file"
        fold_end "$file"
        continue
    fi

    # Check if the namespace directory exists at the project root
    if [ -d "$NS" ]; then
        print -s0 -c2 "Valid namespace '$NS' found in $file."
        successful_files="$successful_files $file"
    else
        print -s0 -c1 "Invalid namespace '$NS' in $file."
        failed_files="$failed_files $file"
    fi

    fold_end "$file"
done

# Final output and exit handling
printf '\n----\n'
if [ -n "$successful_files" ]; then
    print -s1 -c2 "Successfully verified files:$successful_files\n"
fi

# Directly check for non-empty failed_files using a different approach
if [[ -n "$failed_files" ]]; then
    # Explicitly reporting which files failed to make the error message clearer
    print -s0 -c1 "Verification failed for files:$failed_files"
    die "Some namespaces are invalid. Check above for details."
else
    # If there were successful files, but no failed_files, all namespaces are valid.
    if [[ -n "$successful_files" ]]; then
        print -s1 -c2 'All namespaces are valid.'
    else
        print -s1 -c3 'No Markdown files were changed or no namespaces found.'
    fi
fi
