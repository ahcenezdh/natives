#!/bin/bash

set -eu

# Include the common utility script
. "$(dirname "$0")"/common.sh

# Function to list changed Markdown files in a commit range
changed_docs() {
    local commit_range="$1"
    git diff --name-only --diff-filter=ACMR "$commit_range" -- '*.md'
}

# Determine the commit range for the current push
COMMIT_RANGE="${COMMIT_LIST:-$(git rev-parse HEAD~1)..HEAD}"

title "Verifying namespaces in changed Markdown files between $COMMIT_RANGE"

# Begin processing files
failed_files=''
successful_files=''

echo 'Affected Markdown files:'
for file in $(changed_docs "$COMMIT_RANGE"); do
    # Skip specific directories and the README.md file
    if [[ "$file" == .ci/* || "$file" == .github/* || "$file" == .git/* || "$file" == "README.md" ]]; then
        continue
    fi

    fold_start "$file" "Verifying $file"

    # Attempt to extract the namespace from the file
    NS=$(sed -n '/^---$/,/^---$/{/^ns:/p;}' "$file" | sed 's/ns: //' | tr -d '[:space:]')

    if [ -z "$NS" ]; then
        # If no namespace found, consider it successful for the sake of continuing
        successful_files="$successful_files $file"
        fold_end "$file"
        continue
    fi

    # Check if the namespace directory exists at the project root
    if [ ! -d "$NS" ]; then
        print -s0 -c1 "Invalid namespace '$NS' in $file."
        failed_files="$failed_files $file "
    else
        successful_files="$successful_files $file"
    fi

    fold_end "$file"
done

printf '\n----\n'
if [ -n "$successful_files" ]; then
    print -s1 -c2 "Successfully verified files:$successful_files\n"
fi
if [ -n "$failed_files" ]; then
    die "Verification failed for files:$failed_files"
elif [ -z "$successful_files" ]; then
    print -s1 -c3 'No Markdown files were changed or no namespaces found.'
fi
